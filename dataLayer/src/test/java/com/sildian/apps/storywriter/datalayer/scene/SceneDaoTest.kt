package com.sildian.apps.storywriter.datalayer.scene

import com.sildian.apps.storywriter.datalayer.InMemoryDatabaseRule
import com.sildian.apps.storywriter.datalayer.StoryWriterDatabase
import kotlinx.coroutines.test.runTest
import org.junit.Rule
import org.junit.Test
import org.junit.runner.RunWith
import org.robolectric.RobolectricTestRunner
import org.robolectric.RuntimeEnvironment
import kotlin.random.Random
import kotlin.test.assertEquals

@RunWith(RobolectricTestRunner::class)
class SceneDaoTest {

    @get:Rule
    internal val databaseRule = InMemoryDatabaseRule(
        context = RuntimeEnvironment.getApplication().applicationContext,
        klass = StoryWriterDatabase::class.java,
    )

    @Test
    fun `insert new scene should insert it and return its autogenerated id`() = runTest {
        // Given
        val scene = Random.nextSceneDb(id = 0)

        // When
        val id = databaseRule.database.sceneDao().insert(scene = scene)

        // Then
        val result = databaseRule.database.sceneDao().get(id = 1)
        assertEquals(expected = 1, actual = id)
        assertEquals(expected = scene.copy(id = 1), actual = result)
    }

    @Test
    fun `update existing scene should update it`() = runTest {
        // Given
        val scene = Random.nextSceneDb()
        databaseRule.database.sceneDao().insert(scene = scene)
        val newDescription = "New description"
        val updatedScene = scene.copy(description = newDescription)

        // When
        databaseRule.database.sceneDao().update(scene = updatedScene)

        // Then
        val result = databaseRule.database.sceneDao().get(id = scene.id)
        assertEquals(expected = updatedScene, actual = result)
    }

    @Test
    fun `getAll should return all scenes`() = runTest {
        // Given
        val scenes = List(size = 3) { Random.nextSceneDb(id = 0) }
        scenes.forEach { scene -> databaseRule.database.sceneDao().insert(scene = scene) }

        // When
        val result = databaseRule.database.sceneDao().getAll()

        // Then
        val expectedResult = scenes.mapIndexed { index, scene ->
            scene.copy(id = (index + 1).toLong())
        }
        assertEquals(expected = expectedResult, actual = result)
    }
}